Разработка Telegram-бота на Python

Цель:
Разработать Telegram-бота, который будет интегрироваться с открытым API (например, JSON Placeholder), получать данные, обрабатывать их, сохранять в базе данных и Google Sheets. Бот должен предоставлять возможности взаимодействия с пользователем через интерфейс Телеграма.

Требования к функциональности:

1. Взаимодействие с API:
- Бот должен уметь выполнять запросы к открытому API (например, JSON Placeholder) и получать данные.
- Полученные данные необходимо преобразовать из формата camelCase в snake_case.

2. Обработка данных:
- Использовать Pydantic для валидации и преобразования данных в нужную схему.

3. Сохранение данных:
- Сохранять обработанные данные в базе данных через класс-репозиторий.
- Дополнительно сохранять данные в Google Sheets.

4. Архитектура программы:
- Классы должны внедряться в хендлеры через механизм Dependency Injection (DI).
- Использовать удобный инструмент для DI
- Методы должны документироваться через doc-string
- Требуется сделать для бота aiohttp-сервер для принятия вебхуков от телеграма вместо полинга
- Разделение логики работы с бд и бизнес логики

5. Интерфейс пользователя:
- Реализовать команду /start, которая показывает приветственное сообщение с инлайн-кнопками для выполнения действий (запросов к API).
- После успешного выполнения и сохранения действий должно появляться уведомление, что данные сохранены.
- В случае возникновения ошибки, должно отображаться сообщение об ошибке.

6. Докеризация:
- Создать Docker Compose файл для развертывания и запуска приложения.

7. Сервер:
- Написать рабочую кофигурацию nginx для проксирования запросов на бота

Технологии и инструменты:

- Язык программирования: Python
- Работа с API: aiohttp
- Валидация данных: Pydantic
- DI: На выбор разработчика, например, injectable
- База данных: PostgreSQL, sqlalchemy / asyncpg
- Сохранение в Google Sheets: Google Sheets API
- Контейнеризация: Docker, Docker Compose
- Сервер: nginx, желательно наиболее свежей версии

Критерии приемки:

1. Бот корректно реагирует на команду /start и отображает инлайн-кнопки.
2. Полученные данные из API корректно преобразуются и сохраняются в базе данных и Google Sheets.
3. В случае успешного выполнения операций бот информирует об этом пользователя.
4. В случае возникновения ошибок, бот отображает соответствующее сообщение.
5. Развертывание приложения с помощью Docker Compose проходит без ошибок.
6. Архитектура соответствует требованиям, код написан чисто