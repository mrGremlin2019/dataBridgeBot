import logging
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from dependency_injector.wiring import inject, Provide

from src.api.user_service import UserService
from src.bot.keyboards import get_main_keyboard
from src.db.config_db import get_db
from src.db.crud import UserRepository
from src.utils.google_sheets import GoogleSheetsClient
from src.DI.container import Container

router = Router()
"""
–†–æ—É—Ç–µ—Ä –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ Telegram-–±–æ—Ç–∞.
"""

@router.message(CommandStart())
@inject
async def start_handler(
    message: types.Message
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏ –≤—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏.

    :param message: –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logging.error(f"Start handler error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "get_data")
@inject
async def get_data_handler(
    callback: types.CallbackQuery,
    user_service: UserService = Provide[Container.user_service]
) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    :param callback: –æ–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
    :param user_service: —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (DI)
    """
    await callback.answer()
    try:
        users = await user_service.fetch_users()
        text = "\n\n".join(
            f"<b>{u.name}</b>\nüìß {u.email}\nüåç {u.website}"
            for u in users
        )
        await callback.message.answer(f"üìÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{text}")
    except Exception as e:
        logging.error(f"Get data error: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

@router.callback_query(F.data == "save_data")
@inject
async def save_data_handler(
    callback: types.CallbackQuery,
    user_service: UserService = Provide[Container.user_service],
    user_repo: UserRepository = Provide[Container.user_repo],
    sheets_client: GoogleSheetsClient = Provide[Container.sheets_client]
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ Google Sheets.

    :param callback: –æ–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞
    :param user_service: —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (DI)
    :param user_repo: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ë–î (DI)
    :param sheets_client: –∫–ª–∏–µ–Ω—Ç Google Sheets (DI)
    """
    await callback.answer()
    try:
        users = await user_service.fetch_users()
        async with get_db() as db:
            await user_repo.save_users(db, users)
        sheets_client.append_users([user.dict() for user in users])
        await callback.message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        logging.error(f"Save data error: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
